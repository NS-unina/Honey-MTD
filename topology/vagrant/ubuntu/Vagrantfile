# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "ubuntu/trusty64"

    config.vm.define "int_service" do |int_service|
      int_service.vm.box = "ubuntu/trusty64"
      int_service.vm.synced_folder "./int_service", "/home/emma/ubuntu/int_service"
      int_service.vm.network :forwarded_port, guest: 22, host: 3200, id: 'ssh'
      int_service.vm.network "public_network", bridge: "tap2", mac: "0800276dec72", ip: "192.168.3.11"
      
      int_service.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.4.0/24 via 192.168.3.1 dev eth1"

      int_service.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.5.0/24 via 192.168.3.1 dev eth1"

      int_service.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.10.0/24 via 192.168.3.1 dev eth1"

      int_service.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.11.0/24 via 192.168.3.1 dev eth1"
      
      int_service.vm.provision "shell", path: "./configurations/int_service.sh"
    end

    config.vm.define "elk" do |elk|
      elk.vm.box = "ubuntu/focal64"
        elk.vm.provider "virtualbox" do |elk1|
          # Customize the amount of memory on the VM:
	  elk1.memory = "8192"
	end
      elk.vm.synced_folder "elk/", "/home/emma/ubuntu/elk"
      elk.vm.network :forwarded_port, guest: 22, host: 3203, id: 'ssh'
      elk.vm.network "public_network", bridge: "tap5", mac: "0800277db7b8", ip: "192.168.5.10"
      elk.vm.network "public_network", bridge: "tap11", mac: "080027f56b90", ip: "192.168.11.10"
      
      elk.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.3.0/24 via 192.168.5.1 dev enp0s8"

      elk.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.4.0/24 via 192.168.5.1 dev enp0s8"

      elk.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.10.0/24 via 192.168.11.1 dev enp0s9"

      elk.vm.provision "shell", path: "./configurations/elk.sh"
    end

    config.vm.define "int_heralding" do |int_heralding|
      int_heralding.vm.box = "ubuntu/focal64"
      int_heralding.vm.synced_folder "shared/", "/home/emma/ubuntu/shared"
      int_heralding.vm.network :forwarded_port, guest: 22, host: 3201, id: 'ssh'
      int_heralding.vm.network "public_network", bridge: "tap3", mac: "0800276c0abf", ip: "192.168.3.12"
    
      int_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.4.0/24 via 192.168.3.1 dev enp0s8"

      int_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.5.0/24 via 192.168.3.1 dev enp0s8"

      int_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.10.0/24 via 192.168.3.1 dev enp0s8"

      int_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.11.0/24 via 192.168.3.1 dev enp0s8"

      int_heralding.vm.provision "shell", path: "./configurations/int_heralding.sh"
    end
    
    config.vm.define "ext_cowrie" do |ext_cowrie|
      ext_cowrie.vm.box = "ubuntu/focal64"
      ext_cowrie.vm.synced_folder "ext_cowrie/", "/home/emma/ubuntu/ext_cowrie"
      ext_cowrie.vm.network :forwarded_port, guest: 22, host: 3202, id: 'ssh'
      ext_cowrie.vm.network "public_network", bridge: "tap4", mac: "080027b70e58", ip: "192.168.4.10"
    
      ext_cowrie.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.3.0/24 via 192.168.4.1 dev enp0s8"

      ext_cowrie.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.5.0/24 via 192.168.4.1 dev enp0s8"

      ext_cowrie.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.10.0/24 via 192.168.4.1 dev enp0s8"

      ext_cowrie.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.11.0/24 via 192.168.4.1 dev enp0s8"

      ext_cowrie.vm.provision "shell", path: "./configurations/ext_cowrie.sh"
    end

    config.vm.define "ext_heralding" do |ext_heralding|
      ext_heralding.vm.box = "ubuntu/focal64"
      ext_heralding.vm.synced_folder "ext_heralding/", "/home/emma/ubuntu/ext_heralding"
      ext_heralding.vm.network :forwarded_port, guest: 22, host: 3204, id: 'ssh'
      ext_heralding.vm.network "public_network", bridge: "tap7", mac: "0800276df998", ip: "192.168.4.11"
    
      ext_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.3.0/24 via 192.168.4.1 dev enp0s8"

      ext_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.5.0/24 via 192.168.4.1 dev enp0s8"

      ext_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.10.0/24 via 192.168.4.1 dev enp0s8"

      ext_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.11.0/24 via 192.168.4.1 dev enp0s8"

      ext_heralding.vm.provision "shell", path: "./configurations/ext_heralding.sh"
    end
        
    config.vm.define "dmz_heralding" do |dmz_heralding|
      dmz_heralding.vm.box = "ubuntu/focal64"
      dmz_heralding.vm.synced_folder "dmz_heralding/", "/home/emma/ubuntu/dmz_heralding"
      dmz_heralding.vm.network :forwarded_port, guest: 22, host: 3205, id: 'ssh'
      dmz_heralding.vm.network "public_network", bridge: "tap10", mac: "0800272c3092", ip: "192.168.10.10"
    
      dmz_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.3.0/24 via 192.168.10.1 dev enp0s8"

      dmz_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.5.0/24 via 192.168.10.1 dev enp0s8"

      dmz_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.4.0/24 via 192.168.10.1 dev enp0s8"

      dmz_heralding.vm.provision "shell",
        run: "always",
        inline: "ip route add 192.168.11.0/24 via 192.168.10.1 dev enp0s8"

      dmz_heralding.vm.provision "shell", path: "./configurations/dmz_heralding.sh"
    end
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  #  config.vm.network "public_network", auto_config: false 
  #  uno.vm.network "public_network", bridge: "tap1", ip: "192.168.3.10"
  #  due.vm.network "public_network", bridge: "tap2", ip: "192.168.3.11"

  #  uno.vm.provision "shell",
  #    run: "always",
  #    inline: "ip route add 192.168.4.0/24 via 192.168.3.1 dev eth1"

  #  uno.vm.provision "shell",
  #    run: "always",
  #    inline: "ip route add 192.168.5.0/24 via 192.168.3.1 dev eth1"

  #  uno.vm.provision "shell",
  #    run: "always",
  #    inline: "ip route add 192.168.10.0/24 via 192.168.3.1 dev eth1"

  #  uno.vm.provision "shell",
  #    run: "always",
  #    inline: "ip route add 192.168.11.0/24 via 192.168.3.1 dev eth1"
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
